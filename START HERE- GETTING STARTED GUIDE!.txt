The purpose of this project is to kickstart any new projects with a comon environment for our dev team so we can jump right in and start developing.

this project should address the following needs:
	Package management
	Bundling
	Minification
	Sourcemaps
	Transpiling
	Dynamic HTML Generation
	Centralized HTTP
	Mock API framework
	Common Libraries
	Dev web server
	Linting
	Automated Testing
	Continuous Integration
	Automated Build
	Automated Deployment
	Working Example App

Common editor environment settings (requires plugin for atom and vsCode)
*	https://editorconfig.org/

THINGS TO CONSIDER FOR FUTURE PROJECTS:
	Sharing development work outside a local network: localtunel, ngrok, now, Surge
		-note: these would be great tools to leverage if you dont need to hit an api or if that api does not care about where the requests are originating from (cors security)

	gulp vs npmScripts
		- gulp plugins are typically abstractions of npm packages. (if there is a bug in eslint, you would have to wait for esling to be updated and then gulp-eslint to be updated as well.)
		- https://medium.freecodecamp.org/why-i-left-gulp-and-grunt-for-npm-scripts-3d6853dd22b8

*	npmScripts notes:
		- all defined tasks can also have "pre" and "post" hooks. so for instance, you create a script with the tag "start" if you define another script with the tag "prestart". When you run "npm start" the prescript will execute first
		- example: npm start -s (silent mode, will get significantly less output to the console. at the minimum this removes the echoed command output that would normally show)

TRANSPILING: Allows you to use the latest version of JS (ES6 or greater) and this code will be transpiled down to ES5 for environments that dont yet support the newest versions of JS (like IE...)
	(this tabel illustrates why we should transpile https://kangax.github.io/compat-table/es6/ specifically the IE11 column)
	Typescript vs Babel
		Typescript: enhanced autocomplete, enhanced readability, safer refactoring, additional non-standard features (interfaces)
*		Babel: write standardized js, leverage full JS Ecosystem, use experimental features earlier, no type defs or annotations required
		NOTE: The Code and Build Scripts in this project are transplied with Babel

BUNDLING:
	module formats: AMD, CommonJS,UMD, ES6Modules, IIFE (immediately invoked function expressions)
*		ES6 MODULES should be considered the preferred method for encapsulating our code
			WHY? It's standardized
				 It's statically analyzable
				 	-improved auto complete
					-intelligent refactoring
					-fails fast
					-tree shaking (identifying unused code that can be eliminated)
				 It's easy to read
					-named "imports"
					-default "exports"
	bundlers: bundle code into a single minified file
		-Browserify, Webpack, Rollup, JSPM
*		WEBPACK should be considered the preferred method although rollup is gaining support in the community
			Why: Bundle splitting (deliver portions of js that only relate to the page you're loading)
				Hot Module Reloading (make a change and it auto reloaded in place without refreshing the page?)
				Tree Shaking
			Note: webpack does not generate any physical files, it serves from memory.
*				ALSO - Check out Webpack Fundamentals by Joe Eames on pluralsight for a deep dive

SOURCEMAPS: for debugging transpiled and bundled code
	-maps code back to original source
	-generate them as part of the build
	-only downloaded when the user opens the developer tools!
	-to set breakpoints open up the dev tools and on the left sidebar there should be a tree item for the website and one for webpack. expand webpack and you should see all the original js code.

LINTING
	-ESLInt
		-check out eslint plugins like eslint-plugin-angular
		-also look at http://github.com/dustinspecker/awesome-eslint  it's a good resource for everything eslint
		-file watching: eslint-watch npm package to relint code and can be run via an npm script example: "esw webpack.config.* src buildscripts" This calls eslint watch and lints the webpack files everything in source/ and everything in buildScripts/
		-!NOTE: does not lint experimental features(this is not likely to be a problem unless we start leveraging bleeding edge features of JS)

TESTING (automated-unit)
    -6 key decisions
        -framework
**          -Mocha
*           -Jasmine
            -Tape
            -QUnit
            -AVA
*           -Jest
        -assertion library (declare what you expect: expect(4+2).to.equal(4))
*           -chai
            -should.js
            -expect
        -helper Libraries
            -JSDOM -run dom related tests without a browser
            -cheerio - query virtual DOM using jQuery selectors
        -where to run tests
            -Browser - Karma, Testem (more overhead because you have to set them up)
            -headless browser - PhantomJS
*           -In-memory DOM - JSDOM (lighter weight than phantomJS)
        -where to place tests
            -Centralized
*           -Alongside - system.js & system.spec.js in the same folder
        -when to run tests
            -run everytime you hit save

JS Continuous Integration
    -travisCI - tight integration with github, linux based travis-ci.org. easy automated testing and linting on checkin
    -Appveyor - windows based
    -Jenkins
HTTP calls
    -making http calls
        -node:
*       -browser:
            Options for performing http requests:
                -XHR (xmlHttpRequest)
                -jQuery($ajax)
                -Framework based (angular)
**              -Fetch (soon to be native in browsers, accomplished with a polyfill)
            NOTES: Selective Polyfilling
                -polyfill.io will return only polyfills that the user agent requires (depending on if the feature is supported on that browser)
                    fetch example: <script src="https://cdn.polyfill.io/v2/polyfill.js?features=fetch"></script>

        -node & browser: isomorphic fetch, xhr, superagent, axios
    -notes:
        -make sure to centralize all http calls in one location
            -handle preloader logic: e.g. show a spinner
            -handle errors
            -single seam for mocking

    -mocking http calls (did not complete this section of the course. revist the course if you want to rely heavily on mocking)
        -why mock
            -unit testing
            -instant response
            -keep working when services are down
            -rapid prototyping
            -avoid inter-team bottlenecks
            -work offline
        -approaches/services
            -Nock - good for unit testing
            -static JSON
            -create a dev webserver to return mocked data
                -api-mock
                -JSON server
                -JSON schema faker
                -express api

        -generate mock data and mock api
            declare our schema
                -json schema faker
            generate random data
                -faker.js
                -chance.js
                -randexp.js

PROJECT STRUCTURE
    -INCLUDE A DEMO APPLICATION
        -shows examples: directory structure and file naming, framework usage, testing, mock api, working automated deployment
        -Codifies decisions
        -interactive example of working with a starter

    -PROJECT STRUCTURE TIPS
        -js belongs in a .js file. if you dont, you cant leverage babel, linting, testing, reuse, import implicit dependencies
        -consider organizing by feature as opposed to by filetype
        -Extract Logic into Plain Old Javascript Objects- strive to do as much as you can with no framework specific code- helps minimize impact of changing frameworks...
            -an example of this philosophy: react-slingshot project on github.

PRODUCTION BUILDS
    -Minification
        -speed page loads and reduces bandwidth
*       -TreeShaking (in webpack 2)
    -Referencing Bundled Assets in HTML
        -hardcoding: e.g. <body><script src="bundle.js"></script></body>
        -mainpulate via node
        -html-webpack-plugin: simplifies the creation of your apps html file. templates, helps with cache busting
            -can also minify html do decrease bandwidth
    -Sourcemaps for debugging in PRODUCTION
    -Dynamic HTML
        -html-webpack-plugin: simplifies the creation of your apps html file. templates, helps with cache busting
            -can also minify html do decrease bandwidth
    -Cache busting
        -save http requests
        -force request for latest version
        PLAN:
            -hash the bundle filename
            -generate HTML dynamically
*       Investigate: have webserver send farfuture headers for js resources
        Webpack MD5 hash: generates a hash value based on your js that will only change if your js changes
    -Bundle splitting
        -speed page loads for accessing specific areas of the application (e.g. only downloading what they need for that page)
        -avoid re-downloading all libraries. only download changed js bundles
        Tools:
            -Add extra entries into the webpack.config.prod to separate vendor chunks/bundles
            -commons chunk plugins: moves modules that occur in multiple chunks/bundles into a new chunk/bundle
                -if you refrence a tool in the js and in the vendors.js entry in the webpack config, it will only be added to the vendor.js Thus reducing the size of the app.js file
    -Extract and Minify CSS

    -Error Logging: all of these are paid tools. Since these are paid services, I am not setting this up for this example project.
        tools for error logging:
*           -TrackJS
            -Sentry
            -New Relic
            -Raygun
    HTML Templates based on environment: usefull for conditionally adding JS for specific deployment environment (e.g. in prod but not dev)
        (NOTE this is not demonstrated in this project)
        -EJS: embededjs.org
            -

